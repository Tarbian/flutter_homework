import 'dart:io';
import 'dart:math';

const SOUPS = {
  1: '–ë–æ—Ä—â',
  2: '–°–æ–ª—è–Ω–∫–∞',
  3: '–†–æ–∑—Å–æ–ª—å–Ω–∏–∫',
  4: '–ì—Ä–∏–±–Ω–∏–π —Å—É–ø',
  5: '–¢–æ–º –Ø–º',
  6: '–ö—É—Ä—è—á–∏–π –±—É–ª—å–π–æ–Ω',
  7: '–°—É–ø-–ø—é—Ä–µ –∑ –≥–∞—Ä–±—É–∑–∞'
};

const weekDays = [
  '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
  '–í—ñ–≤—Ç–æ—Ä–æ–∫',
  '–°–µ—Ä–µ–¥–∞',
  '–ß–µ—Ç–≤–µ—Ä',
  '–ü\'—è—Ç–Ω–∏—Ü—è',
  '–°—É–±–æ—Ç–∞',
  '–ù–µ–¥—ñ–ª—è'
];

const visitors = [
  {'name': '–í—ñ—Ç—è', 'favoriteSoup': 1},
  {'name': '–ö–æ–ª—è', 'favoriteSoup': 4},
  {'name': '–ê–ª–µ–∫—Å', 'favoriteSoup': 7},
];

void main() {
  Random random = Random();
  int mostPopularSoup = -1;
  int maxCount = -1;
  List<int> popularSoups = [];

  int days = getValidIntInput('–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ (1-30):',
      '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:', 1, 30);
  List<List<int>> soupChoices = getSoupChoices(days);

  Map<int, int> soupCount = analyzeSoupPopularity(soupChoices);

  for (var entry in soupCount.entries) {
    if (entry.value > maxCount) {
      maxCount = entry.value;
      mostPopularSoup = entry.key;
    }
  }

  print('–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π —Å—É–ø - ${SOUPS[mostPopularSoup]}!');

  print('\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ —Å—É–ø—ñ–≤:');
  soupCount.forEach((key, value) {
    print('${SOUPS[key]}: $value —Ä–∞–∑(—ñ–≤)');
  });

  List<MapEntry<int, int>> sortedSoups = soupCount.entries.toList();

  sortedSoups.sort((a, b) => b.value.compareTo(a.value));

  for (int i = 0; i < sortedSoups.length; i++) {
    popularSoups.add(sortedSoups[i].key);
  }

  print('\n–ú–µ–Ω—é —Å—É–ø—ñ–≤ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å:');
  for (int i = 0; i < 7; i++) {
    print('${weekDays[i]}: ${SOUPS[popularSoups[i % popularSoups.length]]}');
  }

  print('\n–û—Ü—ñ–Ω–∫–∏ –≤—ñ–¥ –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤:');

  for (int day = 0; day < 7; day++) {
    print('\n–î–µ–Ω—å ${day + 1}:');
    int todaySoup = popularSoups[day % popularSoups.length];

    for (var visitor in visitors) {
      int rating;
      if (visitor['favoriteSoup'] == todaySoup) {
        rating = 6 + random.nextInt(5);
      } else {
        rating = 1 + random.nextInt(10);
      }
      print('–ö–ª—ñ—î–Ω—Ç ${visitor['name']}: $rating');
    }
  }
}

int getValidIntInput(String question, String errorMessage, int min, int max) {
  while (true) {
    print(question);
    try {
      String? input = stdin.readLineSync();
      if (input != null && input.isNotEmpty) {
        int number = int.parse(input);
        if (number >= min && number <= max) {
          return number;
        }
      }
    } catch (e) {}
    print(errorMessage);
  }
}

List<int> getValidSoupNumbers(String question, String errorMessage) {
  while (true) {
    print(question);
    try {
      String? input = stdin.readLineSync();
      if (input != null && input.isNotEmpty) {
        List<int> numbers = [];
        for (String num in input.split(' ')) {
          int soupNumber = int.parse(num);
          if (soupNumber >= 1 && soupNumber <= 7) {
            numbers.add(soupNumber);
          }
        }
        if (numbers.isNotEmpty) {
          return numbers;
        }
      }
    } catch (e) {}
    print(errorMessage);
  }
}

List<List<int>> getSoupChoices(int days) {
  List<List<int>> soupChoices = [];

  for (int i = 0; i < days; i++) {
    List<int> dayChoices = getValidSoupNumbers(
        '\n–î–µ–Ω—å ${i + 1}. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–∏ —Å—É–ø—ñ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª (1-7):',
        '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –Ω–æ–º–µ—Ä–∏ —Å—É–ø—ñ–≤ (1-7):');
    soupChoices.add(dayChoices);
  }

  print('\n–û–±—Ä–∞–Ω—ñ —Å—É–ø–∏ –ø–æ –¥–Ω—è—Ö:');
  for (int i = 0; i < soupChoices.length; i++) {
    print('–î–µ–Ω—å ${i + 1}: ${soupChoices[i].map((e) => SOUPS[e]).join(", ")}');
  }

  return soupChoices;
}

Map<int, int> analyzeSoupPopularity(List<List<int>> soupChoices) {
  Map<int, int> soupCount = {};

  for (var dayChoices in soupChoices) {
    for (var soup in dayChoices) {
      soupCount[soup] = (soupCount[soup] ?? 0) + 1;
    }
  }

  return soupCount;
}



// Task 4

// –ó–∞–≤–¥–∞–Ω–Ω—è: –°—É–ø –¥–Ω—è –ø—Ä–µ–º—ñ—É–º
// –£–º–æ–≤–∞:

// –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ 
// ùëõ
// n (–Ω–µ –±—ñ–ª—å—à–µ 30), –ø—Ä–æ—Ç—è–≥–æ–º —è–∫–∏—Ö –≤—ñ–Ω –∑–∞–ø–∏—Å—É—î —Å–≤—ñ–π –≤–∏–±—ñ—Ä ¬´—Å—É–ø—É –¥–Ω—è¬ª. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –º–∞—î 
// –±—É—Ç–∏ –≤ –º–µ–∂–∞—Ö –≤—ñ–¥ 1 –¥–æ 30. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –Ω–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤, –ø—Ä–æ–≥—Ä–∞–º–∞
// –º–∞—î –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ –π–æ–≥–æ –≤–≤–µ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.

// –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –æ–¥–Ω–µ –∞–±–æ –∫—ñ–ª—å–∫–∞ —á–∏—Å–µ–ª –≤—ñ–¥ 1 –¥–æ 7 (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª), 
// —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –ø–µ–≤–Ω–æ–º—É —Å—É–ø—É:

// 1 - ¬´–ë–æ—Ä—â¬ª
// 2 - ¬´–°–æ–ª—è–Ω–∫–∞¬ª
// 3 - ¬´–†–æ–∑—Å–æ–ª—å–Ω–∏–∫¬ª
// 4 - ¬´–ì—Ä–∏–±–Ω–∏–π —Å—É–ø¬ª
// 5 - ¬´–¢–æ–º –Ø–º¬ª
// 6 - ¬´–ö—É—Ä—è—á–∏–π –±—É–ª—å–π–æ–Ω¬ª
// 7 - ¬´–°—É–ø-–ø—é—Ä–µ –∑ –≥–∞—Ä–±—É–∑–∞¬ª

// –ü—Ä–∏–∫–ª–∞–¥: ¬´1 3¬ª - –æ–∑–Ω–∞—á–∞—î, —â–æ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å –±—É–ª–æ –æ–±—Ä–∞–Ω–æ ‚Äú–ë–æ—Ä—â‚Äù —ñ ‚Äú–†–æ–∑—Å–æ–ª—å–Ω–∏–∫‚Äù.

// –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞:

// - –í–∏–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—É–ø—ñ–≤, –æ–±—Ä–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è.

// - –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏, —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –±—É–≤ –æ–±—Ä–∞–Ω–∏–π –∫–æ–∂–µ–Ω —Å—É–ø –∑–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥.

// - –ü–æ–∫–∞–∑–∞—Ç–∏, —è–∫–∏–π —Å—É–ø –±—É–≤ –æ–±—Ä–∞–Ω–∏–π –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ.

// - –¢—Ä–µ–±–∞ –ø—Ä–æ—Ä–µ–∫–ª–∞–º—É–≤–∞—Ç–∏ –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –æ–±—Ä–∞–Ω–∏–π —Å—É–ø

// - –¢—Ä–µ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å—ñ–≤ –º–µ–Ω—é –Ω–∞ –∫–æ–∂–µ–Ω –¥–µ–Ω—å —Ç–∏–∂–Ω—è, –¥–µ –±—É–¥—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –Ω–∞–π–±—ñ–ª—å—à –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Å—É–ø–∏.

// - –î–∞–ª—ñ —Ç—Ä–µ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤, –≤–æ–Ω–∏ –ª—é–±–ª—è—Ç—å –∞–±–æ –æ–¥–∏–Ω –∞–±–æ —ñ–Ω—à–∏–π —Å—É–ø —Ç–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ç–∞–∫, —â–æ–± —Ü—ñ –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ
// –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –∫–æ–∂–µ–Ω –¥–µ–Ω—å —Ç–∞ –±—Ä–∞–ª–∏ —Å—É–ø –∑ –º–µ–Ω—é —Ç–∞ —Å—Ç–∞–≤–∏–ª–∏ –æ—Ü—ñ–Ω–∫—É –∑–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è. –≤—ñ–¥ 1 –¥–æ 10 –Ω–∞ —Ä–∞–Ω–¥–æ–º, 
// –∞–ª–µ —è–∫—â–æ —î —É–ª—é–±–ª–µ–Ω–∏–π —Å—É–ø, —Ç–æ –æ—Ü—ñ–Ω–∫–∞ –∑–∞–≤–∂–¥–∏ –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 6.

// –ü—Ä–∏–∫–ª–∞–¥ 

// *–æ–±—Ä–∞–ª–∏ —Å—É–ø–∏ –¥–Ω—è*
// *–ø—ñ–¥–±–∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É*
// –ù–∞—à–µ –º–µ–Ω—é —Å—É–ø—ñ–≤ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –∑–≥—ñ–¥–Ω–æ –∑ —É–ø–æ–¥–æ–±–∞–Ω—å –≥—É—Ä–º–∞–Ω–∞:
// –ø–Ω - –ë–æ—Ä—â
// –≤—Ç - –ì—Ä–∏–±–Ω–∏–π —Å—É–ø
// ...

// –û—Å—å –æ—Ü—ñ–Ω–∫–∏ –≤—ñ–¥ –Ω–∞—à–∏—Ö –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤:

// –î–µ–Ω—å 1:
// –ö–ª—ñ—î–Ω—Ç –í—ñ—Ç—è 2,
// –ö–ª—ñ—î–Ω—Ç –ö–æ–ª—è 3,
// –ö–ª—ñ—î–Ω—Ç –ê–ª–µ–∫—Å 10

// –î–µ–Ω—å 2:
// –ö–ª—ñ—î–Ω—Ç –í—ñ—Ç—è 4,
// –ö–ª—ñ—î–Ω—Ç –ö–æ–ª—è 7,
// –ö–ª—ñ—î–Ω—Ç –ê–ª–µ–∫—Å 6
